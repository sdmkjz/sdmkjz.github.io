<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MkJz&#39;s blog</title>
  
  <subtitle>橘纸の博客</subtitle>
  <link href="https://blog.sdmkjz.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.sdmkjz.cn/"/>
  <updated>2022-08-16T01:24:06.269Z</updated>
  <id>https://blog.sdmkjz.cn/</id>
  
  <author>
    <name>MkJz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在M1 mac环境下使用Python连接oracle数据库</title>
    <link href="https://blog.sdmkjz.cn/2022/08/15/zai-m1-mac-huan-jing-xia-shi-yong-python-lian-jie-oracle-shu-ju-ku/"/>
    <id>https://blog.sdmkjz.cn/2022/08/15/zai-m1-mac-huan-jing-xia-shi-yong-python-lian-jie-oracle-shu-ju-ku/</id>
    <published>2022-08-15T13:14:44.000Z</published>
    <updated>2022-08-16T01:24:06.269Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>因oracle官方驱动暂无m1-arm版本，所以使用arm的python解释器报驱动错误，只能使用intel版本转译</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cx_Oracle.DatabaseError: DPI-1047: Cannot locate a 64-bit Oracle Client library: &quot;dlopen(libclntsh.dylib, 0x0001): tried: &#39;&#x2F;Users&#x2F;xxx&#x2F;software&#x2F;oracle&#x2F;instantclient_19_8&#x2F;libclntsh.dylib&#39; (mach-o file, but is an incompatible architecture (have (x86_64), need (arm64e))), &#39;libclntsh.dylib&#39; (no such file), &#39;&#x2F;usr&#x2F;lib&#x2F;libclntsh.dylib&#39; (no such file), &#39;&#x2F;Users&#x2F;xxx&#x2F;software&#x2F;oracle&#x2F;instantclient_19_8&#x2F;libclntsh.dylib&#39; (mach-o file, but is an incompatible architecture (have (x86_64), need (arm64e))), &#39;&#x2F;Users&#x2F;xxx&#x2F;Project&#x2F;PyProject&#x2F;libclntsh.dylib&#39; (no such file)&quot;. See https:&#x2F;&#x2F;cx-oracle.readthedocs.io&#x2F;en&#x2F;latest&#x2F;user_guide&#x2F;installation.html for help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1、下载并安装intel版本的Python3<br><a href="https://www.python.org/downloads/macos/">https://www.python.org/downloads/macos/</a><br><img src="Snipaste_2022-08-16_09-23-20.png" alt="python官网"><br>2、使用pip安装cx_Oracle</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip3 install cx_Oracle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、下载oracle驱动<br><a href="https://www.oracle.com/database/technologies/instant-client/macos-intel-x86-downloads.html">https://www.oracle.com/database/technologies/instant-client/macos-intel-x86-downloads.html</a><br><img src="Snipaste_2022-08-15_21-46-56.png" alt="oracle官网"><br>4、解压到目录并配置环境变量<br><img src="Snipaste_2022-08-16_08-36-11.png" alt="解压目录"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 需要将目录替换成自己的# Oracle的OCI套件export DYLD_LIBRARY_PATH&#x3D;&#x2F;Users&#x2F;xxxx&#x2F;software&#x2F;oracle&#x2F;instantclient_19_8export PKG_CONFIG_PATH&#x3D;&#x2F;Users&#x2F;xxxx&#x2F;software&#x2F;oracle# 刷新环境变量 此处不一定都是该文件 根据terminal决定source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>请注意此处使用Python intel解释器运行</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import cx_Oracletns &#x3D; &#39;用户名&#x2F;密码@IP地址:端口&#x2F;sid&#39;db1 &#x3D; cx_Oracle.connect(tns)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;因oracle官方驱动暂无m1-arm版本，所以使用arm的python解释器报驱动错误，只能使用intel版本转译&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="Python" scheme="https://blog.sdmkjz.cn/tags/Python/"/>
    
    <category term="Oracle" scheme="https://blog.sdmkjz.cn/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>记一次排查Docker容器网络问题</title>
    <link href="https://blog.sdmkjz.cn/2021/08/15/ji-yi-ci-pai-cha-docker-rong-qi-wang-luo-wen-ti/"/>
    <id>https://blog.sdmkjz.cn/2021/08/15/ji-yi-ci-pai-cha-docker-rong-qi-wang-luo-wen-ti/</id>
    <published>2021-08-15T08:02:14.000Z</published>
    <updated>2021-09-22T10:46:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><p>使用Openwrt安装docker 发现容器内无法访问外部网络 通过ping测试 容器内可访问局域网IP 通过ping域名测试 dns能够正常解析地址 但无法ping通ip地址 后经排查防火墙 发现问题</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li><p>首先附上Docker版本信息</p><p><img src="image-20210815121031494.png" alt="Docker版本"></p></li><li><p><img src="image-20210815120037115.png" alt="配置文件"></p></li></ol><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel">使用vi修改 &#x2F;etc&#x2F;init.d&#x2F;dockerd 启动脚本，标红处启动参数设置成 --iptables&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li></li></ol><pre class="line-numbers language-she" data-language="she"><code class="language-she">执行命令  &#x2F;etc&#x2F;init.d&#x2F;dockerd restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启后发现容器内网络正常</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>dockerd 启动时需要 iptables 为 true 的参数，docker daemon 会自动为防火墙添加上相关规则</li><li>如需开放wan口访问容器权限，建议通过防火墙做端口转发来完成，通过修改/etc/config/dockerd中的wan_mode模式存在一定被攻击风险</li><li>如若修改配置文件 切记重启生效</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h3&gt;&lt;p&gt;使用Openwrt安装docker 发现容器内无法访问外部网络 通过ping测试 容器内可访问局域网IP 通过ping域名测</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://blog.sdmkjz.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker网络命令</title>
    <link href="https://blog.sdmkjz.cn/2021/08/07/docker-wang-luo-ming-ling/"/>
    <id>https://blog.sdmkjz.cn/2021/08/07/docker-wang-luo-ming-ling/</id>
    <published>2021-08-07T14:23:48.000Z</published>
    <updated>2021-08-07T14:28:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker网络命令"><a href="#Docker网络命令" class="headerlink" title="Docker网络命令"></a>Docker网络命令</h2><h4 id="查看所有网络"><a href="#查看所有网络" class="headerlink" title="查看所有网络"></a>查看所有网络</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker network lsNETWORK ID     NAME      DRIVER    SCOPE9473c27d1ebf   bridge    bridge    local9bf6a1c58d75   host      host      local3d82c6fa27f1   mynet     bridge    local2c6941aebcf7   none      null      local37eab5868c16   redis     bridge    local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">bridge:桥接 docker默认none:不配置网络host:和宿主机共享网络container：容器网络连通(不常用)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建自定义网络"><a href="#创建自定义网络" class="headerlink" title="创建自定义网络"></a>创建自定义网络</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker network create --driver bridge --subnet 192.168.0.0&#x2F;16 --gateway192.168.0.1 mynet--driver 网络模式--subnet 地址&#x2F;掩码--gataway 网关自定义网络可以实现容器之间互相ping容器名可ping通&#96;&#96;&#96;&#96;#### 网络连通&#96;&#96;&#96;shelldocker network connect mynet tomcat01跨网络连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实战-redis集群部署"><a href="#实战-redis集群部署" class="headerlink" title="实战:redis集群部署"></a>实战:redis集群部署</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">for port in $(seq 1 6); \do \mkdir -p &#x2F;root&#x2F;mydata&#x2F;redis&#x2F;node-$&#123;port&#125;&#x2F;conftouch &#x2F;root&#x2F;mydata&#x2F;redis&#x2F;node-$&#123;port&#125;&#x2F;conf&#x2F;redis.confcat &lt;&lt; EOF &gt;&#x2F;root&#x2F;mydata&#x2F;redis&#x2F;node-$&#123;port&#125;&#x2F;conf&#x2F;redis.confport 6379bind 0.0.0.0cluster-enabled yescluster-config-file nodes.confcluster-node-timeout 5000cluster-announce-ip 172.38.0.1$&#123;port&#125;cluster-announce-port 6379cluster-announce-bus-port 16379appendonly yesEOFdone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建redis容器</strong></p><pre><code class="shell"># 生成6个redis容器脚本for port in $(seq 1 6);dodocker run -p 637$&#123;port&#125;:6379 -p 1637$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \-v /root/mydata/redis/node-$&#123;port&#125;/data:/data \-v /root/mydata/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \-d --net redis --ip 172.38.0.1$&#123;port&#125; redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.confdone</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker网络命令&quot;&gt;&lt;a href=&quot;#Docker网络命令&quot; class=&quot;headerlink&quot; title=&quot;Docker网络命令&quot;&gt;&lt;/a&gt;Docker网络命令&lt;/h2&gt;&lt;h4 id=&quot;查看所有网络&quot;&gt;&lt;a href=&quot;#查看所有网络&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://blog.sdmkjz.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker容器的HEXO博客</title>
    <link href="https://blog.sdmkjz.cn/2021/07/26/ji-yu-docker-rong-qi-de-hexo-bo-ke/"/>
    <id>https://blog.sdmkjz.cn/2021/07/26/ji-yu-docker-rong-qi-de-hexo-bo-ke/</id>
    <published>2021-07-26T13:51:18.000Z</published>
    <updated>2021-07-27T14:44:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于Docker容器的HEXO博客"><a href="#基于Docker容器的HEXO博客" class="headerlink" title="基于Docker容器的HEXO博客"></a>基于Docker容器的HEXO博客</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>hexo是一个基于Node.js 快速、简洁且高效的博客框架。</p><p>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件</p><p>同时支持部署到Github Pages等平台</p><p>本镜像启动即用，部署简单，同时支持amd64/arm64架构</p><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>创建一个新的博客容器，-p为后台运行(可选)–name=为容器名，可自行指定，使用 -v target:/app 指定您的博客位置,-p为端口映射-p 4000:4000前端口可自行更改：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -p --name&#x3D;hexo \-v &#x2F;blog:&#x2F;app \-p 4000:4000 \mkjz&#x2F;hexo:silm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -p --name&#x3D;hexo \-v &#x2F;blog:&#x2F;app \-p 4000:4000 \mkjz&#x2F;hexo:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：</strong></p><p><strong>1.silm镜像为精简版本，镜像内除hexo-cli外 没有额外安装任何软件包以及npm插件 若有diy需求 请自行访问容器使用指令安装(若为arm64架构，请在tag后指定-arm64版本 例:mkjz/hexo:silm-arm64 )</strong></p><p><strong>2.latest镜像为全量版本，包含git,hexo-permalink-pinyin,hexo-wordcount常用插件，目前只支持amd64架构</strong></p><h3 id="访问Hexo"><a href="#访问Hexo" class="headerlink" title="访问Hexo"></a>访问Hexo</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">访问hexo博客界面 http:&#x2F;&#x2F;&lt;ip_address&gt;:4000  此端口可在启动命令-p中自定义<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="访问容器"><a href="#访问容器" class="headerlink" title="访问容器"></a>访问容器</h3><p>如果您希望执行进一步的配置，即安装自定义主题与安装npm包，可以通过如下指令。访问容器 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker exec -it hexo &#x2F;bin&#x2F;sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>修改配置文件或添加主题后，需重启容器，网站将自动重构</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker restart 容器名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看日志</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker logs 容器名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基于Docker容器的HEXO博客&quot;&gt;&lt;a href=&quot;#基于Docker容器的HEXO博客&quot; class=&quot;headerlink&quot; title=&quot;基于Docker容器的HEXO博客&quot;&gt;&lt;/a&gt;基于Docker容器的HEXO博客&lt;/h2&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://blog.sdmkjz.cn/tags/Docker/"/>
    
    <category term="Hexo" scheme="https://blog.sdmkjz.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像命令</title>
    <link href="https://blog.sdmkjz.cn/2021/07/26/docker-jing-xiang-ming-ling/"/>
    <id>https://blog.sdmkjz.cn/2021/07/26/docker-jing-xiang-ming-ling/</id>
    <published>2021-07-26T02:23:21.000Z</published>
    <updated>2021-07-26T02:31:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker镜像命令"><a href="#Docker镜像命令" class="headerlink" title="Docker镜像命令"></a>Docker镜像命令</h1><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker version  # 显示docker的版本信息docker info    # 显示docker的系统信息 包括容器和镜像数量docker 命令 --help # 帮助命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><h4 id="docker-images-查看所有镜像"><a href="#docker-images-查看所有镜像" class="headerlink" title="docker images 查看所有镜像"></a>docker images 查看所有镜像</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker imagesREPOSITORY    TAG                IMAGE ID       CREATED         SIZEmkjz&#x2F;centos   latest             ad89ab41f5d7   40 hours ago    304MBtomcat        latest             921ef208ab56   2 days ago      668MBmysql         latest             95db2e2bd882   4 days ago      514MBsbwml&#x2F;alist   latest             ae685d913f61   13 days ago     28.9MBredis         5.0.9-alpine3.11   3661c84ee9d0   15 months ago   29.8MBREPOSITORY 仓库源TAG 版本信息IMAGE ID 镜像IDCREATED 镜像创建时间SIZE 镜像大小# 可选项Options:  -a, --all             Show all images (default hides intermediate images)      --digests         Show digests  -f, --filter filter   Filter output based on conditions provided      --format string   Pretty-print images using a Go template      --no-trunc        Don&#39;t truncate output  -q, --quiet           Only show image IDs 只显示镜像ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="docker-search-搜索镜像"><a href="#docker-search-搜索镜像" class="headerlink" title="docker search 搜索镜像"></a>docker search 搜索镜像</h4><pre class="line-numbers language-she" data-language="she"><code class="language-she">[root@localhost ~]# docker search mysqlNAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDmysql                             MySQL is a widely used, open-source relation…   11158     [OK]       mariadb                           MariaDB Server is a high performing open sou…   4235      [OK]       mysql&#x2F;mysql-server                Optimized MySQL Server Docker images. Create…   830                  [OK]percona                           Percona Server is a fork of the MySQL relati…   548       [OK]       phpmyadmin                        phpMyAdmin - A web interface for MySQL and M…   277       [OK]       centos&#x2F;mysql-57-centos7           MySQL 5.7 SQL database server                   90                   # 可选项Options:  -f, --filter filter   Filter output based on conditions provided      --format string   Pretty-print search using a Go template      --limit int       Max number of search results (default 25)      --no-trunc        Don&#39;t truncate output--filter&#x3D;STARS&#x3D;3000 # 搜索出来的STARS是大于3000的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="docker-pull-下载镜像"><a href="#docker-pull-下载镜像" class="headerlink" title="docker pull 下载镜像"></a>docker pull 下载镜像</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker pull redisUsing default tag: latest # 如果不写Tag 默认为最新版本latest: Pulling from library&#x2F;redis # 分层下载，docker联合文件系统33847f680f63: Pull complete 26a746039521: Pull complete 18d87da94363: Pull complete 5e118a708802: Pull complete ecf0dbe7c357: Pull complete 46f280ba52da: Pull complete Digest: sha256:cd0c68c5479f2db4b9e2c5fbfdb7a8acb77625322dd5b474578515422d3ddb59Status: Downloaded newer image for redis:latestdocker.io&#x2F;library&#x2F;redis:latest # 真实地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="docker-rmi-删除镜像"><a href="#docker-rmi-删除镜像" class="headerlink" title="docker rmi 删除镜像"></a>docker rmi 删除镜像</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">[root@localhost ~]# docker rmi redis # 删除指定容器docker rmi 容器名 容器名 容器名 # 删除多个容器docker rmi $(docker images -aq) # 删除全部容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="docker-commit-提交镜像"><a href="#docker-commit-提交镜像" class="headerlink" title="docker commit 提交镜像"></a>docker commit 提交镜像</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker commit 提交容器成为一个新的副本docker commit -m&#x3D;&#39;提交描述的信息&#39; -a&#x3D;&#39;作者&#39; 容器名称 目标镜像名:[tag]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker镜像命令&quot;&gt;&lt;a href=&quot;#Docker镜像命令&quot; class=&quot;headerlink&quot; title=&quot;Docker镜像命令&quot;&gt;&lt;/a&gt;Docker镜像命令&lt;/h1&gt;&lt;h3 id=&quot;帮助命令&quot;&gt;&lt;a href=&quot;#帮助命令&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://blog.sdmkjz.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器常用命令</title>
    <link href="https://blog.sdmkjz.cn/2021/07/25/docker-rong-qi-chang-yong-ming-ling/"/>
    <id>https://blog.sdmkjz.cn/2021/07/25/docker-rong-qi-chang-yong-ming-ling/</id>
    <published>2021-07-25T08:42:45.000Z</published>
    <updated>2021-07-25T08:59:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker容器命令"><a href="#Docker容器命令" class="headerlink" title="Docker容器命令"></a>Docker容器命令</h1><h3 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h3><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel">docker run [可选参数] 镜像名称# 参数说明--name&#x3D; 容器名称-d 后台运行方式-it 采用交互模式运行-p 主机端口:容器端口 指定容器端口映射 -P 随机指定端口-v 卷挂载-e 环境配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列出所有的容器"><a href="#列出所有的容器" class="headerlink" title="列出所有的容器"></a>列出所有的容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker ps命令# 列出正在运行的容器-a # 列出所有的容器-n&#x3D;? # 显示最近创建的容器-q # 只显示容器ID[root@localhost ~]# docker psCONTAINER ID   IMAGE                    COMMAND                  CREATED        STATUS        PORTS                                                                                      NAMES11025ffd4e80   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   11 hours ago   Up 11 hours   0.0.0.0:6376-&gt;6379&#x2F;tcp, :::6376-&gt;6379&#x2F;tcp, 0.0.0.0:16376-&gt;16379&#x2F;tcp, :::16376-&gt;16379&#x2F;tcp   redis-631b5ce0cd98c   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   11 hours ago   Up 11 hours   0.0.0.0:6375-&gt;6379&#x2F;tcp, :::6375-&gt;6379&#x2F;tcp, 0.0.0.0:16375-&gt;16379&#x2F;tcp, :::16375-&gt;16379&#x2F;tcp   redis-5ccc05f2ab8bc   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   11 hours ago   Up 11 hours   0.0.0.0:6374-&gt;6379&#x2F;tcp, :::6374-&gt;6379&#x2F;tcp, 0.0.0.0:16374-&gt;16379&#x2F;tcp, :::16374-&gt;16379&#x2F;tcp   redis-420e40bf0dc2b   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   11 hours ago   Up 11 hours   0.0.0.0:6373-&gt;6379&#x2F;tcp, :::6373-&gt;6379&#x2F;tcp, 0.0.0.0:16373-&gt;16379&#x2F;tcp, :::16373-&gt;16379&#x2F;tcp   redis-3f32e7a237dc7   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   11 hours ago   Up 11 hours   0.0.0.0:6372-&gt;6379&#x2F;tcp, :::6372-&gt;6379&#x2F;tcp, 0.0.0.0:16372-&gt;16379&#x2F;tcp, :::16372-&gt;16379&#x2F;tcp   redis-29b52db0451d1   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   11 hours ago   Up 11 hours   0.0.0.0:6371-&gt;6379&#x2F;tcp, :::6371-&gt;6379&#x2F;tcp, 0.0.0.0:16371-&gt;16379&#x2F;tcp, :::16371-&gt;16379&#x2F;tcp   redis-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel">exitctrl + P + Q # 容器不停止退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel">docker rm 容器ID或名称 # 不能删除正在运行的容器 如果要强制删除rm -fdocker rm -f $(docker ps -aq) # 删除所有容器docker ps -a -q | xargs docker rm # 删除所有容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="启动和停止容器操作"><a href="#启动和停止容器操作" class="headerlink" title="启动和停止容器操作"></a>启动和停止容器操作</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker start 容器ID或名称docker stop 容器ID或名称docker restart 容器ID或名称docker kill 容器ID或名称 # 强制停止容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><h3 id="后台启动命令"><a href="#后台启动命令" class="headerlink" title="后台启动命令"></a>后台启动命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d 镜像名 # 常见问题：docker容器使用后台运行，就必须要有一个前台进程，否则docker发现没有 应用，就会自己停止。 # nginx容器启动后，发现自己没有提供服务，就会立即停止<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel">docker logs 容器名 # 可选参数 -f 持续显示日志 -t 显示日志时间戳 -n 自定义日志条数显示<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看容器中进程信息"><a href="#查看容器中进程信息" class="headerlink" title="查看容器中进程信息"></a>查看容器中进程信息</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker top 容器名 UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD polkitd             48681               48660               0                   7月23                ?                   00:01:21            redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查看容器元数据"><a href="#查看容器元数据" class="headerlink" title="查看容器元数据##"></a>查看容器元数据##</h3><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel">docker inspect 容器名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 方式一 docker exec -it 容器名 &#x2F;bin&#x2F;bash 或 sh 进入容器后开启一个新的终端，可以在里面操作(常用) # 方式二 docker attach -it 容器名 &#x2F;bin&#x2F;bash 或 sh 进入容器当前正在运行的终端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker cp 容器名：容器内路径 目的主机路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -v 本机目录：容器目录 docker run --it -v &#x2F;home&#x2F;ceshi:&#x2F;home centos &#x2F;bin&#x2F;bash 实现数据持久化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="具名挂载和匿名挂载"><a href="#具名挂载和匿名挂载" class="headerlink" title="具名挂载和匿名挂载"></a>具名挂载和匿名挂载</h3><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel"># 匿名挂载-V 容器内路径docker run -d -P --name nginx01 -v &#x2F;etc&#x2F;nginx nginx# 查看所有volume的情况docker volume ls# 具名挂载docker -run -d -P --name nginx02 -v juming-nginx:&#x2F;etc&#x2F;nginx nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的docker容器内的卷，没有指定目录的情况下都在/var/lib/docker/volumes/xxxx/_data</p><p>我们通过具名挂载可以方便的找到我们的一个卷，大多数情况在使用的具名挂载</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-v 容器内路径 # 匿名挂载-v 卷名:容器内路径 # 具名挂载-v &#x2F;宿主机路径：&#x2F;容器内路径 # 指定路径挂载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 通过-v容器内路径 ：ro rw改变读写权限ro readonly # 只读rw readwrite # 可读可写docker run -d -P --name nginx01 -v juming-nginx:&#x2F;etc&#x2F;nginx:ro nginxdocker run -d -P --name nginx01 -v juming-nginx:&#x2F;etc&#x2F;nginx:rw nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>多个mysql数据同步</p><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel">docker run -d -p 3310:3306 -v &#x2F;etc&#x2F;mysql&#x2F;conf.d -v &#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;123456 --name mysql01 mysql:5.7docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 --name mysql02 --volumes-form mysql01 mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker容器命令&quot;&gt;&lt;a href=&quot;#Docker容器命令&quot; class=&quot;headerlink&quot; title=&quot;Docker容器命令&quot;&gt;&lt;/a&gt;Docker容器命令&lt;/h1&gt;&lt;h3 id=&quot;新建容器并启动&quot;&gt;&lt;a href=&quot;#新建容器并启动&quot; class</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://blog.sdmkjz.cn/tags/Docker/"/>
    
  </entry>
  
</feed>
